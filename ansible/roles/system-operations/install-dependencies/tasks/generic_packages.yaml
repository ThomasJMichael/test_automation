# Dynamically include the appropriate variable file based on the detected OS family.
# If the OS-specific file doesn't exist, it will fall back to the default.
- name: Include OS-specific package variables
  include_vars: 
    file: "{{ role_path }}/vars/{{ ansible_os_family | lower }}-packages.yaml"

- name: Display kernel version using Ansible facts
  debug:
    msg: "Kernel version is {{ ansible_kernel }}"

- name: Install required packages
  package:
    name: "{{ package }}"
    state: present
  loop: "{{ generic_packages }}"
  loop_control:
    loop_var: package
  become: true
  register: package_result
  ignore_errors: true

- name: Debug failed package installations
  debug:
    msg: "Failed to install {{ package_failed.item }}. Error: {{ package_failed.msg }}"
  loop: "{{ package_result.results }}"
  when: 
    - package_failed is defined
    - package_failed.failed
  loop_control:
    loop_var: package_failed



